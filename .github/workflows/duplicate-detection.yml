name: Repository Duplication Detection

on:
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  detect-duplicates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: pip install requests
        
      - name: Create detection script
        run: |
          cat > detect_duplicates.py << 'EOF'
          import requests
          import os
          import sys
          import json
          from datetime import datetime

          def search_github_code(repo_name, github_token):
              """Search GitHub for repository name mentions"""
              headers = {
                  'Authorization': f'token {github_token}',
                  'Accept': 'application/vnd.github.v3+json'
              }
              
              search_term = f'"{repo_name}"'
              url = f'https://api.github.com/search/code?q={search_term}'
              
              response = requests.get(url, headers=headers)
              
              if response.status_code != 200:
                  print(f"Error searching GitHub: {response.status_code}")
                  return []
                  
              data = response.json()
              results = []
              
              for item in data.get('items', []):
                  if item['repository']['full_name'] != repo_name:
                      results.append({
                          'repository': item['repository']['full_name'],
                          'path': item['path'],
                          'url': item['html_url'],
                          'detected_at': datetime.now().isoformat()
                      })
              
              return results

          def main():
              github_token = os.environ.get('GITHUB_TOKEN')
              repo_name = os.environ.get('GITHUB_REPOSITORY')
              
              if not github_token:
                  print("GitHub token not provided")
                  sys.exit(1)
              
              # Search for repository mentions
              results = search_github_code(repo_name, github_token)
              
              # Save results
              with open('detection_results.json', 'w') as f:
                  json.dump(results, f, indent=2)
              
              # Exit with status based on results
              if results:
                  print(f"Found {len(results)} potential duplications")
                  sys.exit(1)
              else:
                  print("No duplications detected")
                  sys.exit(0)

          if __name__ == "__main__":
              main()
          EOF
      
      - name: Run detection script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python detect_duplicates.py
        continue-on-error: true
      
      - name: Create issue if duplicates found
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            try {
              if (fs.existsSync('detection_results.json')) {
                const results = JSON.parse(fs.readFileSync('detection_results.json', 'utf8'));
                
                if (results.length > 0) {
                  let body = '## Potential Repository Duplication Alert\n\n';
                  body += 'The following instances potentially reference or duplicate repository content:\n\n';
                  
                  results.forEach(result => {
                    body += `- Repository: [${result.repository}](https://github.com/${result.repository})\n`;
                    body += `  - File: [${result.path}](${result.url})\n`;
                    body += `  - Detected: ${result.detected_at}\n\n`;
                  });
                  
                  github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: 'ALERT: Potential Repository Duplication Detected',
                    body: body,
                  });
                }
              }
            } catch (error) {
              console.error('Error processing detection results:', error);
            }
